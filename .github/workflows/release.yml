name: Build Flutter APK

on:
  push:
    branches:
      - main

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          FLAVORS_JSON=$(cat flavors.json)
          # Initialize an empty list for platforms
          PLATFORMS_LIST=()

          # Loop through each flavor and check conditions
          for flavor in $(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_upload == true) | .key'); do
            IS_IOS_UPLOAD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$flavor\"].is_ios_upload")
            IS_UPLOAD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$flavor\"].is_upload")

            # Add platform based on `is_ios_upload`
            if [ "$IS_IOS_UPLOAD" == "true" ] && [ "$IS_UPLOAD" == "true" ]; then
              PLATFORMS_LIST+=("ios")
            else 
              PLATFORMS_LIST+=("android")
            fi
          done

          # Remove duplicates and sort the platforms list
          UNIQUE_PLATFORMS=$(echo "${PLATFORMS_LIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')

          # Format the platforms into a JSON array
          PLATFORMS_ARRAY=$(echo "$UNIQUE_PLATFORMS" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          PLATFORMS_ARRAY="[$PLATFORMS_ARRAY]"

          # Debug output
          echo "Flavors to build for platforms: $PLATFORMS_ARRAY"

          # Set the platforms in the environment variable for the matrix to use
          echo "::set-output name=platforms::$PLATFORMS_ARRAY"

  build:
    needs: parse
    runs-on: macos-latest
    steps:
      - name: Debug Print Platforms
        run: |
          # Ensure the PLATFORMS environment variable is set and echo it
          echo "PLATFORMS_LIST: ${{ needs.parse.outputs.platforms }}"

