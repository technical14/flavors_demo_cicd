name: Build Flutter APK

on:
  push:
    branches:
      - main

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          FLAVORS_JSON=$(cat flavors.json)
          # Extract dynamic platforms based on the presence of `platforms` in each flavor
          ANDROID_PLATFORMS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_ios_upload == false and .value.is_upload == true)')
          IOS_PLATFORMS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_ios_upload == true and .value.is_upload == true)')

          # Combine both lists (Android and iOS platforms) without duplicates
          COMBINED_PLATFORMS=$(echo -e "$ANDROID_PLATFORMS_LIST\n$IOS_PLATFORMS_LIST" | sort -u)

          # Format the platforms into a JSON array for use in the matrix strategy
          PLATFORMS_ARRAY=$(echo "$COMBINED_PLATFORMS" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          PLATFORMS_ARRAY="[$PLATFORMS_ARRAY]"
          
          # Debug output
          echo "Flavors to build for platforms: $PLATFORMS_ARRAY"

          # Set the platforms in the environment variable for the matrix to use
          echo "::set-output name=platforms::$PLATFORMS_ARRAY"

  build:
    needs: parse
    runs-on: macos-latest
    steps:
      - name: Debug Print Platforms
        run: |
          # Ensure the PLATFORMS environment variable is set and echo it
          echo "PLATFORMS_LIST: ${{ fromJson(needs.parse.outputs.platforms) }}"

