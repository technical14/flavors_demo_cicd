name: Build Flutter APK

on:
  push:
    branches:
      - main

jobs:
  parse:
    runs-on: macos-latest
    outputs:
      flavors: ${{ steps.set-flavors.outputs.flavors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq with Homebrew
        run: |
          # Install jq using Homebrew (macOS package manager)
          brew install jq

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          # Read the JSON file and extract the list of flavors where is_ios_upload is true
          FLAVORS_JSON=$(cat flavors.json)
          FLAVORS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_ios_upload == true) | .value.name')

          # Add quotes around each flavor to properly form the array
          FLAVORS_ARRAY=$(echo "$FLAVORS_LIST" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          FLAVORS_ARRAY="[$FLAVORS_ARRAY]"

          # Output the flavors array
          echo "Flavors to build: $FLAVORS_ARRAY"

          # Set the flavors array as an output of the step
          echo "::set-output name=flavors::$FLAVORS_ARRAY"
  build:
    needs: parse
    runs-on: macos-latest
    if: ${{ fromJson(needs.parse.outputs.flavors) != '[]' && fromJson(needs.parse.outputs.flavors) != '["null"]' }}  # Only run if flavors are not empty or ["null"]
    strategy:
      matrix:
        flavor: ${{ fromJson(needs.parse.outputs.flavors) }}
        platform: [android, ios]  # For Android
      fail-fast: false
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: ${{ runner.os }}-flutter-sdk-${{ hashFiles('.flutter-version') }}
          restore-keys: |
            ${{ runner.os }}-flutter-sdk-       

      # Step 2: Set up Flutter SDK
      - name: Set up Flutter SDK
        if: steps.cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.1'  # You can specify a specific Flutter version here, like '3.10.4' as per your Android Studio

      # Step 3: Set up Java 17
      - name: Set up Java 17
        if: matrix.platform == 'android'
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify Java as per your Android Studio (gradle-7.5-all version wise change)
          distribution: 'temurin'  # Use AdoptOpenJDK distribution

      # Step 4: Clean Flutter project (optional, if you want a fresh build)
      - name: Clean Flutter project
        run: flutter clean

      # Step 5: Get Flutter dependencies
      - name: Get Flutter dependencies
        run: flutter pub get

      # Step 6: Install dependencies using CocoaPods
      - name: Install Pods
        if: matrix.platform == 'ios'
        run: |
          cd ios
          pod install  # Install dependencies

      # Step 7: Set up Xcode (specific version)
      - name: Install Xcode 16.1 (Manual Setup)
        if: matrix.platform == 'ios'
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.1.app/Contents/Developer
          sudo xcodebuild -version  # Verify installed version of Xcode

      # Caching Flutter dependencies (caching Flutter dependencies, if needed)
      - name: Cache Flutter Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      # Step 8: Install Flutter dependencies
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          flutter pub get  # Get Flutter project dependencies

      # Step 9: Install CocoaPods dependencies
      #      - name: Install CocoaPods dependencies
      #        run: |
      #          cd ios
      #          pod install --repo-update

      #Step 8: Upload APK Android and Ios
      - name: Build APK for flavor ${{ matrix.flavor }}
        run: |
          FLAVOR="${{ matrix.flavor }}"
          FLAVORS_JSON=$(cat flavors.json)  # Load the flavors JSON file

          # Extract the entrypoint for the specific flavor (without a for loop)
          ENTRY_POINT=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .entrypoint")
          VERSION=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .version")
          BUILD_NUMBER=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .build_number")
          KEYS=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].keystore_base64")
          KEY_ALIAS=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].key_alias")
          KEY_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].key_password")
          STORE_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].store_password")

          # If you want to extract other data, you can do it similarly:
          IS_IOS_UPLOAD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .is_ios_upload")

          # Print the extracted data
          echo "Flavor: $FLAVOR"
          echo "Entry Point: $ENTRY_POINT"
          echo "Build Number: $BUILD_NUMBER"
          echo "Key Alias: $KEY_ALIAS"
          echo "Key Password: $KEY_PASSWORD"
          echo "Store Password: $STORE_PASSWORD"

          # Check if is_upload is true before proceeding with the build
          if [[ "$IS_IOS_UPLOAD" == "true" ]]; then

              if [[ "${{ matrix.platform }}" == "ios" || "$IS_IOS_UPLOAD" == "true" ]]; then
                  echo "Running iOS build for flavor: $FLAVOR"
                  flutter build ipa \
                    --flavor $FLAVOR \
                    --target=$ENTRY_POINT \
                    --release \
                    --build-name=$VERSION \
                    --build-number=$BUILD_NUMBER
              else
                echo "Skipping iOS build for flavor $FLAVOR due to condition mismatch."
              fi
          
      
              echo "Successfully built APK and AAB for $FLAVOR"
          else
            echo "Skipping build for flavor $FLAVOR because is_upload is false."
          fi

      # Step 9: Upload IPA for iOS to GitHub Actions Artifacts
      - name: Upload IPA for flavor ${{ matrix.flavor }}
        if: matrix.platform == 'ios' && success()
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.flavor }}-release-ipa"
          path: "build/ios/iphoneos/Runner.app"

      # Step 10: Archive the iOS app using the sandbox scheme
      - name: Archive iOS app
        if: matrix.platform == 'ios'
        run: |
          xcodebuild clean -workspace ios/Runner.xcworkspace -scheme sandbox -configuration Release
          xcodebuild archive -workspace ios/Runner.xcworkspace -scheme sandbox -configuration Release -archivePath $PWD/build/sandbox.xcarchive

      # Step 11: Export IPA
      - name: Export IPA
        if: matrix.platform == 'ios'
        run: |
          xcodebuild -exportArchive -archivePath $PWD/build/sandbox.xcarchive -exportPath $PWD/build/ipa -exportOptionsPlist ios/ExportOptions.plist

      # Step 12: Upload IPA as an artifact
      - name: Upload IPA
        if: matrix.platform == 'ios'
        uses: actions/upload-artifact@v3
        with:
          name: iOS-App-IPA
          path: $PWD/build/ipa/*.ipa