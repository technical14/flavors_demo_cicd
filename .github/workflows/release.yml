name: Build Flutter APK

on:
  push:
    branches:
      - main   # Trigger action on push to the 'main' branch

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      flavors: ${{ steps.set-flavors.outputs.flavors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Set up JSON Parsing for create metrix
      # Cache jq
      - name: Cache jq
        uses: actions/cache@v3
        with:
          path: /usr/bin/jq
          key: ${{ runner.os }}-jq-version-1.6
          restore-keys: |
            ${{ runner.os }}-jq-

      # Set up JSON Parsing
      - name: Install jq
        run: sudo apt-get install jq

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          # Read the JSON file and extract the list of flavors where is_upload is true
          FLAVORS_JSON=$(cat flavors.json)
          FLAVORS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_upload == true) | .value.name')

          # Add quotes around each flavor to properly form the array
          FLAVORS_ARRAY=$(echo "$FLAVORS_LIST" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          FLAVORS_ARRAY="[$FLAVORS_ARRAY]"

          # Output the flavors array
          echo "Flavors to build: $FLAVORS_ARRAY"

          # Set the flavors array as an output of the step
          echo "::set-output name=flavors::$FLAVORS_ARRAY"
  build:
    needs: parse
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.parse.outputs.flavors) != '[]' && fromJson(needs.parse.outputs.flavors) != '["null"]' }}  # Only run if flavors are not empty or ["null"]
    strategy:
      matrix:
        flavor: ${{ fromJson(needs.parse.outputs.flavors) }}
      fail-fast: false
    steps:
      # Step 2: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: ${{ runner.os }}-flutter-sdk-${{ hashFiles('.flutter-version') }}
          restore-keys: |
            ${{ runner.os }}-flutter-sdk-       

      # Step 3: Set up Flutter SDK
      - name: Set up Flutter SDK
        if: steps.cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.1'  # You can specify a specific Flutter version here, like '3.10.4' as per your Android Studio

      # Step 4: Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify Java as per your Android Studio (gradle-7.5-all version wise change)
          distribution: 'temurin'  # Use AdoptOpenJDK distribution

      # Cache jq
      - name: Cache jq
        uses: actions/cache@v3
        with:
          path: /usr/bin/jq
          key: ${{ runner.os }}-jq-version-1.6
          restore-keys: |
            ${{ runner.os }}-jq-

      # Step 5: Set up JSON Parsing
      - name: Install jq
        if: steps.cache.outputs.cache-hit != 'true'
        run: sudo apt-get install jq

      # Step 6: flutter project clean
      - name: Clean project
        run: flutter clean

      # Caching Flutter dependencies (caching Flutter dependencies, if needed)
      - name: Cache Flutter Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      # Step 7: Install dependencies
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          flutter pub get  # Get Flutter project dependencies

      # Step 8: Create APK and AAB
      - name: Build APK for flavor ${{ matrix.flavor }}
        run: |
          FLAVOR="${{ matrix.flavor }}"
          FLAVORS_JSON=$(cat flavors.json)  # Load the flavors JSON file
          
          # Extract the entrypoint for the specific flavor (without a for loop)
          ENTRY_POINT=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .entrypoint")
          VERSION=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .version")
          BUILD_NUMBER=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .build_number")
          KEYS=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].keystore_base64")
          KEY_ALIAS=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].key_alias")
          KEY_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].key_password")
          STORE_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].store_password")
          
          # If you want to extract other data, you can do it similarly:
          IS_UPLOAD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .is_upload")
          
          # Print the extracted data
          echo "Flavor: $FLAVOR"
          echo "Entry Point: $ENTRY_POINT"
          echo "Is Upload: $IS_UPLOAD"
          echo "Build Number: $BUILD_NUMBER"
          
          # Check if is_upload is true before proceeding with the build
          if [[ "$IS_UPLOAD" == "true" ]]; then         
          
              # Decode the keystore from base64
              mkdir -p keystore
              echo "$KEYS" | base64 -d > keystore/$FLAVOR.keystore.jks
          
              # Set environment variables for signing
              export KEYSTORE_PATH="keystore/$FLAVOR.keystore.jks"
              export KEY_ALIAS
              export KEY_PASSWORD
              export STORE_PASSWORD
          
              flutter build appbundle \
                --flavor $FLAVOR \
                --target=$ENTRY_POINT \
                --release \
                --build-name=$VERSION \
                --build-number=$BUILD_NUMBER
          
              echo "Successfully built APK and AAB for $FLAVOR"
          else
            echo "Skipping build for flavor $FLAVOR because is_upload is false."
          fi          

      # Step 12: Upload AAB to Slack
      - name: Get Upload URL from Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          CHANNEL_ID: C089T0M0FEC  # The channel ID or name to upload the file to
        run: |
          FILE_PATH="build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab"  # Adjust the file path as needed
          
          # Check if the .aab file exists
          if [ ! -f "${FILE_PATH}" ]; then
            echo "Error: .aab file not found at ${FILE_PATH}"
            exit 1
          fi
  
          # Get the file size in bytes
          FILE_SIZE=$(stat -c %s "${FILE_PATH}")
          echo "File size: ${FILE_SIZE} bytes"
          
          UPLOAD_URL_RESPONSE=$(curl -X POST https://slack.com/api/files.getUploadURLExternal \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -d "filename=app-${{ matrix.flavor }}-release.aab" \
            -d "filetype=application/octet-stream" \
            -d "channels=$CHANNEL_ID" \
            -d "initial_comment=Here is the latest Android App Bundle (.aab) file!" \
            -d "length=${FILE_SIZE}")
          
          # Print the full response to understand what's being returned
          echo "Upload URL Response: ${UPLOAD_URL_RESPONSE}"
          
          # Step 4: Extract the upload_url from the response
          UPLOAD_URL=$(echo $UPLOAD_URL_RESPONSE | jq -r '.upload_url')
          
          if [ -z "${UPLOAD_URL}" ] || [ "${UPLOAD_URL}" == "null" ]; then
            echo "Error: Upload URL is not set properly."
            exit 1
          fi
          
          echo "Successfully retrieved upload URL: ${UPLOAD_URL}"
                    
          # Step 6: Perform the file upload to Slack using curl
          UPLOAD_RESPONSE=$(curl -X POST "${UPLOAD_URL}" \
            -F "file=@${FILE_PATH}" \
            -F "filename=app-${{ matrix.flavor }}-release.aab" \
            -F "filetype=application/octet-stream")
          
          # Print the upload response to inspect the result
          echo "Upload Response: ${UPLOAD_RESPONSE}"
          
          FILE_ID=$(echo "$UPLOAD_URL_RESPONSE" | jq -r '.file_id')
          
          if [ -z "$FILE_ID" ] || [ "$FILE_ID" == "null" ]; then
            echo "Error: Could not retrieve file_id."
            exit 1
          fi
          
          # Step 4: Complete the file upload via Slack API
          COMPLETE_UPLOAD_RESPONSE=$(curl -X POST https://slack.com/api/files.completeUploadExternal \
          -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{
            "files": [
              {
                "id": ${FILE_ID},
                "title": "slack-test"
              }
            ]
          }')
          
          echo "Complete Upload Response: ${COMPLETE_UPLOAD_RESPONSE}"
          
          if [[ "$COMPLETE_UPLOAD_RESPONSE" == *"ok\":true"* ]]; then
            echo "File uploaded and completed successfully!"
            else
          echo "Error: File upload completion failed."
            exit 1
          fi
          
          NOTIFY_RESPONSE=$(curl -X POST https://slack.com/api/chat.postMessage \
          -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
          -H "Content-Type: application/json" \
          --data '{
            "channel": "$CHANNEL_ID", 
            "text": "Upload aab file",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "File *$(basename ${FILE_PATH})* has been successfully uploaded to Slack."
                }
              }
            ]
          }')
          
          echo "Notification Response: ${NOTIFY_RESPONSE}"
          
          # Step 7: Optionally, check if the upload was successful
          if echo "$NOTIFY_RESPONSE" | grep -q '"ok":true'; then
            echo "Slack upload successful!"
          else
            echo "Slack upload failed. See response for details."
            exit 1
          fi

