name: Build Flutter APK

on:
  push:
    branches:
      - main   # Trigger action on push to the 'main' branch

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      flavors: ${{ steps.set-flavors.outputs.flavors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Set up JSON Parsing
      # Cache jq
      - name: Cache jq
        uses: actions/cache@v3
        with:
          path: /usr/bin/jq
          key: ${{ runner.os }}-jq-version-1.6
          restore-keys: |
            ${{ runner.os }}-jq-

      - name: Install jq
        if: steps.cache.outputs.cache-hit != 'true'
        run: sudo apt-get install jq

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          # Read the JSON file and extract the list of flavors where is_upload is true
          FLAVORS_JSON=$(cat flavors.json)
          FLAVORS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_upload == true) | .value.name')

          # Add quotes around each flavor to properly form the array
          FLAVORS_ARRAY=$(echo "$FLAVORS_LIST" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          FLAVORS_ARRAY="[$FLAVORS_ARRAY]"

          # Output the flavors array
          echo "Flavors to build: $FLAVORS_ARRAY"

          # Set the flavors array as an output of the step
          echo "::set-output name=flavors::$FLAVORS_ARRAY"
  build:
    needs: parse
    runs-on: macos-latest
    if: ${{ fromJson(needs.parse.outputs.flavors) != '[]' && fromJson(needs.parse.outputs.flavors) != '["null"]' }}  # Only run if flavors are not empty or ["null"]
    strategy:
      matrix:
        flavor: ${{ fromJson(needs.parse.outputs.flavors) }}
        platform: [ios]
      fail-fast: false
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: ${{ runner.os }}-flutter-sdk-${{ hashFiles('.flutter-version') }}
          restore-keys: |
            ${{ runner.os }}-flutter-sdk-       

      # Step 2: Set up Flutter SDK
      - name: Set up Flutter SDK
        if: steps.cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.1'  # You can specify a specific Flutter version here, like '3.10.4' as per your Android Studio

      # Step 3: Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify Java as per your Android Studio (gradle-7.5-all version wise change)
          distribution: 'temurin'  # Use AdoptOpenJDK distribution

      # Step 4: Set up Xcode 16.1 (correct action here)
      - name: Set up Xcode 16.1
        uses: actions/setup-xcode@v2  # Correct GitHub Action for setting up Xcode
        with:
          xcode-version: '16.1'

      # Step 3: Install CocoaPods (latest stable version)
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods # Install latest CocoaPods
          pod --version # Verify CocoaPods installation

      # Step 4: Install dependencies using CocoaPods
      - name: Install Pods
        run: |
          pod install # Install the dependencies

      # Step 5: flutter project clean
      - name: Clean project
        run: flutter clean

      # Caching Flutter dependencies (caching Flutter dependencies, if needed)
      - name: Cache Flutter Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      # Step 6: Install dependencies
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          flutter pub get  # Get Flutter project dependencies

      # Step 5: Clean and Archive the Project
      - name: Clean and Archive the Project
        run: |
          xcodebuild clean -workspace flavors_demo_cicd/flavors_demo_cicd.xcworkspace -scheme sandbox -configuration Release
          xcodebuild archive -workspace flavors_demo_cicd/flavors_demo_cicd.xcworkspace -scheme sandbox -configuration Release -archivePath $PWD/build/sandbox.xcarchive

      # Step 6: Export IPA from the Archive
      - name: Export IPA
        run: |
          xcodebuild -exportArchive -archivePath $PWD/build/sandbox.xcarchive -exportPath $PWD/build/ipa -exportOptionsPlist ExportOptions.plist

      # Step 7: Upload IPA as an artifact (optional)
      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: flavor_cicd_demo.ipa
          path: $PWD/build/ipa/*.ipa
