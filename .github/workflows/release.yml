name: Build Flutter APK

on:
  push:
    branches:
      - main

jobs:
  parse:
    runs-on: macos-latest
    outputs:
      flavors: ${{ steps.set-flavors.outputs.flavors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq with Homebrew
        run: |
          # Install jq using Homebrew (macOS package manager)
          brew install jq

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          # Read the JSON file and extract the list of flavors where is_ios_upload is true
          FLAVORS_JSON=$(cat flavors.json)
          FLAVORS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_ios_upload == true) | .value.name')

          # Add quotes around each flavor to properly form the array
          FLAVORS_ARRAY=$(echo "$FLAVORS_LIST" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          FLAVORS_ARRAY="[$FLAVORS_ARRAY]"

          # Output the flavors array
          echo "Flavors to build: $FLAVORS_ARRAY"

          # Set the flavors array as an output of the step
          echo "::set-output name=flavors::$FLAVORS_ARRAY"
  build:
    needs: parse
    runs-on: macos-latest
    if: ${{ fromJson(needs.parse.outputs.flavors) != '[]' && fromJson(needs.parse.outputs.flavors) != '["null"]' }}  # Only run if flavors are not empty or ["null"]
    strategy:
      matrix:
        flavor: ${{ fromJson(needs.parse.outputs.flavors) }}
        platform: [ios]  # For Android
      fail-fast: false
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Flutter SDK
      - name: Set up Flutter SDK
        if: steps.cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.1'  # You can specify a specific Flutter version here, like '3.10.4' as per your Android Studio

      # Step 3: Set up Java 17
      - name: Set up Java 17
        if: matrix.platform == 'android'
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify Java as per your Android Studio (gradle-7.5-all version wise change)
          distribution: 'temurin'  # Use AdoptOpenJDK distribution

      # Step 4: Clean Flutter project (optional, if you want a fresh build)
      - name: Clean Flutter project
        run: flutter clean

      # Step 5: Get Flutter dependencies
      - name: Get Flutter dependencies
        run: flutter pub get

      # Step 6: Install dependencies using CocoaPods
      - name: Install Pods
        if: matrix.platform == 'ios'
        run: |
          cd ios
          pod install  # Install dependencies

      # Step 7: Set up Xcode (specific version)
      - name: Install Xcode 16.1 (Manual Setup)
        if: matrix.platform == 'ios'
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.1.app/Contents/Developer
          sudo xcodebuild -version  # Verify installed version of Xcode

      # Caching Flutter dependencies (caching Flutter dependencies, if needed)
      - name: Cache Flutter Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      # Step 8: Install Flutter dependencies
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          flutter pub get  # Get Flutter project dependencies

      # Step 9: Install CocoaPods dependencies
      #      - name: Install CocoaPods dependencies
      #        run: |
      #          cd ios
      #          pod install --repo-update

      #Step 8: Upload APK Android and Ios
      - name: Build APK for flavor ${{ matrix.flavor }}
        run: |
          FLAVOR="${{ matrix.flavor }}"
          FLAVORS_JSON=$(cat flavors.json)  # Load the flavors JSON file

          # Extract the entrypoint for the specific flavor (without a for loop)
          ENTRY_POINT=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .entrypoint")
          VERSION=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .version")
          BUILD_NUMBER=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .build_number")
          APPLE_ID=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .apple_id")
          APP_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .app_specific_password")
          CERT_BASE64=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .developer_certificate_base64")
          CERT_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .developer_certificate_password")
          APP_IDENTIFIER=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .app_identifier")
          TEAM_ID=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .team_id")
          PROFILE_BASE64=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .provisioning_profile_base64")
          PROVISIONING_PROFILE_SPECIFIER=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .provisioning_profile_specifier")
          APP_STORE_KEY_ID=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .app_store_key_id")
          APP_STORE_ISSUER_ID=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .app_store_issuer_id")
          APP_STORE_KEY_CONTENT=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .app_store_key_content_base64")
          
          APP_NAME=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .app_name")
          SCHEMA_NAME=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .name")

          # If you want to extract other data, you can do it similarly:
          IS_IOS_UPLOAD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .is_ios_upload")

          # Print the extracted data
          echo "Flavor: $FLAVOR"
          echo "Apple ID: $APPLE_ID"
          echo "App Password: $APP_PASSWORD"
          echo "Certificate password: $CERT_PASSWORD"
          echo "App Identifier: $APP_IDENTIFIER"
          echo "Team ID: $TEAM_ID"
          echo "Certificate base64: $CERT_BASE64"
          echo "Provisioning Profile: $PROFILE_BASE64"
          echo "Provisioning Profile Specifier: $PROVISIONING_PROFILE_SPECIFIER"

          # Check if is_upload is true before proceeding with the build
          if [[ "$IS_IOS_UPLOAD" == "true" ]]; then

              if [[ "${{ matrix.platform }}" == "ios" || "$IS_IOS_UPLOAD" == "true" ]]; then
                  echo "APPLE_ID=$APPLE_ID" >> $GITHUB_ENV
                  echo "APP_PASSWORD=$APP_PASSWORD" >> $GITHUB_ENV
                  echo "CERT_BASE64=$CERT_BASE64" >> $GITHUB_ENV
                  echo "CERT_PASSWORD=$CERT_PASSWORD" >> $GITHUB_ENV
                  echo "APP_IDENTIFIER=$APP_IDENTIFIER" >> $GITHUB_ENV
                  echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
                  echo "PROFILE_BASE64=$PROFILE_BASE64" >> $GITHUB_ENV
                  echo "APP_STORE_KEY_ID=$APP_STORE_KEY_ID" >> $GITHUB_ENV
                  echo "APP_STORE_ISSUER_ID=$APP_STORE_ISSUER_ID" >> $GITHUB_ENV
                  echo "APP_STORE_KEY_CONTENT=APP_STORE_KEY_CONTENT" >> $GITHUB_ENV
                  
                  # Set up the signing certificate
                  echo "$CERT_BASE64" | base64 --decode > certificate.p12
                  security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
                  security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
                  security set-keychain-settings -t 3600 -u build.keychain
                  
                  # Set up provisioning profile
                  echo "$PROFILE_BASE64" | base64 --decode > provisioning_profile.mobileprovision
                  mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                  mv provisioning_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
                  # Create authentication key file
                  echo "${{ secrets.APP_STORE_API_KEY_BASE64 }}" | base64 --decode > AuthKey.p8
          
                  # Build IPA
                  # Set environment variables for Xcode build
                  xcodebuild clean build \
                    -workspace ios/Runner.xcworkspace \
                    -scheme $SCHEMA_NAME \
                    -configuration Release-sandbox \
                    -destination 'generic/platform=iOS' \
                    -archivePath build/"$SCHEMA_NAME".xcarchive \
                    CODE_SIGN_STYLE=Manual \
                    CODE_SIGN_IDENTITY="Apple Distribution" \
                    PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
                    DEVELOPMENT_TEAM="$TEAM_ID" \
                    ONLY_ACTIVE_ARCH=NO \
                    CODE_SIGNING_REQUIRED=YES \
                    CODE_SIGNING_ALLOWED=NO
              else
                echo "Skipping iOS build for flavor $FLAVOR due to condition mismatch."
              fi
          
              echo "Successfully built APK and AAB for $FLAVOR"
          else
            echo "Skipping build for flavor $FLAVOR because is_upload is false."
          fi

      # Step 9: Upload IPA for iOS to GitHub Actions Artifacts
#      - name: Upload IPA for flavor ${{ matrix.flavor }}
#        if: matrix.platform == 'ios' && success()
#        uses: actions/upload-artifact@v4.6.0
#        with:
#          name: "${{ matrix.flavor }}-release-ipa"
#          path: "build/ios/iphoneos/Runner.app"

      # Step 10: Archive the iOS app using the sandbox scheme
#      - name: Archive iOS app
#        if: matrix.platform == 'ios'
#        run: |
#          xcodebuild clean -workspace ios/Runner.xcworkspace -scheme sandbox -configuration Release
#          xcodebuild archive -workspace ios/Runner.xcworkspace -scheme sandbox -configuration Release -archivePath $PWD/build/sandbox.xcarchive
#
#      # Step 11: Export IPA
#      - name: Export IPA
#        if: matrix.platform == 'ios'
#        run: |
#          xcodebuild -exportArchive -archivePath $PWD/build/sandbox.xcarchive -exportPath $PWD/build/ipa -exportOptionsPlist ios/ExportOptions.plist

#      # Step 12: Upload IPA as an artifact
#      - name: Upload IPA
#        if: matrix.platform == 'ios'
#        uses: actions/upload-artifact@v4.6.0
#        with:
#          name: iOS-App-IPA
#          path: $PWD/build/ipa/*.ipa