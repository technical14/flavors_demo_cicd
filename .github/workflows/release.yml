name: Build Flutter APK

on:
  push:
    branches:
      - main   # Trigger action on push to the 'main' branch
permissions:
  contents: read  # Read access to repository contents (default)

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      flavors: ${{ steps.set-flavors.outputs.flavors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 1: Set up JSON Parsing for create metrix
      # Cache jq
      - name: Cache jq
        uses: actions/cache@v3
        with:
          path: /usr/bin/jq
          key: ${{ runner.os }}-jq-version-1.6
          restore-keys: |
            ${{ runner.os }}-jq-

      # Set up JSON Parsing
      - name: Install jq
        run: sudo apt-get install jq

      - name: Parse flavors from JSON
        id: set-flavors
        run: |
          # Read the JSON file and extract the list of flavors where is_upload is true
          FLAVORS_JSON=$(cat flavors.json)
          FLAVORS_LIST=$(echo "$FLAVORS_JSON" | jq -r '.flavors | to_entries[] | select(.value.is_upload == true) | .value.name')

          # Add quotes around each flavor to properly form the array
          FLAVORS_ARRAY=$(echo "$FLAVORS_LIST" | sed 's/^/"/;s/$/"/' | paste -sd "," -)
          FLAVORS_ARRAY="[$FLAVORS_ARRAY]"

          # Output the flavors array
          echo "Flavors to build: $FLAVORS_ARRAY"

          # Set the flavors array as an output of the step
          echo "::set-output name=flavors::$FLAVORS_ARRAY"
  build:
    needs: parse
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.parse.outputs.flavors) != '[]' && fromJson(needs.parse.outputs.flavors) != '["null"]' }}  # Only run if flavors are not empty or ["null"]
    strategy:
      matrix:
        flavor: ${{ fromJson(needs.parse.outputs.flavors) }}
      fail-fast: false
    steps:
      # Step 2: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v3
        with:
          path: ~/.flutter
          key: ${{ runner.os }}-flutter-sdk-${{ hashFiles('.flutter-version') }}
          restore-keys: |
            ${{ runner.os }}-flutter-sdk-       

      # Step 3: Set up Flutter SDK
      - name: Set up Flutter SDK
        if: steps.cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.1'  # You can specify a specific Flutter version here, like '3.10.4' as per your Android Studio

      # Step 4: Set up Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Specify Java as per your Android Studio (gradle-7.5-all version wise change)
          distribution: 'temurin'  # Use AdoptOpenJDK distribution

      # Cache jq
      - name: Cache jq
        uses: actions/cache@v3
        with:
          path: /usr/bin/jq
          key: ${{ runner.os }}-jq-version-1.6
          restore-keys: |
            ${{ runner.os }}-jq-

      # Step 5: Set up JSON Parsing
      - name: Install jq
        if: steps.cache.outputs.cache-hit != 'true'
        run: sudo apt-get install jq

      # Step 6: flutter project clean
      - name: Clean project
        run: flutter clean

      # Caching Flutter dependencies (caching Flutter dependencies, if needed)
      - name: Cache Flutter Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            build/
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      # Step 7: Install dependencies
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          flutter pub get  # Get Flutter project dependencies

      # Step 8: Create APK and AAB
      - name: Build APK for flavor ${{ matrix.flavor }}
        run: |
          FLAVOR="${{ matrix.flavor }}"
          FLAVORS_JSON=$(cat flavors.json)  # Load the flavors JSON file
          
          # Extract the entrypoint for the specific flavor (without a for loop)
          ENTRY_POINT=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .entrypoint")
          VERSION=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .version")
          BUILD_NUMBER=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .build_number")
          KEYS=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].keystore_base64")
          KEY_ALIAS=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].key_alias")
          KEY_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].key_password")
          STORE_PASSWORD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"].store_password")
          
          # If you want to extract other data, you can do it similarly:
          IS_UPLOAD=$(echo "$FLAVORS_JSON" | jq -r ".flavors[\"$FLAVOR\"] | .is_upload")
          
          # Print the extracted data
          echo "Flavor: $FLAVOR"
          echo "Entry Point: $ENTRY_POINT"
          echo "Is Upload: $IS_UPLOAD"
          echo "Build Number: $BUILD_NUMBER"
          
          # Check if is_upload is true before proceeding with the build
          if [[ "$IS_UPLOAD" == "true" ]]; then         
          
              # Decode the keystore from base64
              mkdir -p keystore
              echo "$KEYS" | base64 -d > keystore/$FLAVOR.keystore.jks
          
              # Set environment variables for signing
              export KEYSTORE_PATH="keystore/$FLAVOR.keystore.jks"
              export KEY_ALIAS
              export KEY_PASSWORD
              export STORE_PASSWORD
          
              flutter build appbundle \
                --flavor $FLAVOR \
                --target=$ENTRY_POINT \
                --release \
                --build-name=$VERSION \
                --build-number=$BUILD_NUMBER
          
              echo "Successfully built APK and AAB for $FLAVOR"
          else
            echo "Skipping build for flavor $FLAVOR because is_upload is false."
          fi

      # Step 1: Debug - Print the secret value (BE CAREFUL with secrets)
      - name: Print WEBHOOK_URL secret
        run: echo "WEBHOOK_URL=${{ secrets.WEBHOOK_URL }}"

      # Upload AAB to Slack
      - name: Upload AAB to Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          webhookUrl: ${{ secrets.WEBHOOK_URL }}
          file: ${{ github.workspace }}/build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab
          channels: 'C089T0M0FEC'
          title: 'New App Bundle (AAB)'
          filename: 'app-${{ matrix.flavor }}-release.aab'

      # Send Slack Notification (Optional: before or after file upload)
#      - name: Send notification to Slack
#        uses: slackapi/slack-github-action@v1.24.0
#        with:
#          botToken: "xoxb-8232907570615-8313266494726-JL75KJfiakRW1zrPM15VlGix"  # Slack Bot Token from GitHub Secrets
#          text: "A new App Bundle (AAB) has been uploaded to Slack!"  # Your message
#          channels: 'C089T0M0FEC'  # Slack channel name

      # Step 1: Install dependencies (jq, curl, Google Cloud SDK)
#      - name: Upload to gdrive
#        uses: adityak74/google-drive-upload-git-action@main
#        with:
#          credentials: ${{ secrets.GCP_CREDENTIAL }}
#          filename: "build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab"
#          folderId: ${{ secrets.DRIVE_FOLDER_ID }}
#          name: "app-${{ matrix.flavor }}-release.aab" # optional string
#          overwrite: "true" # optional boolean
#
#      - name: Make Directory Structure
#        run: |
#          mkdir -p w/x/y
#          date +%s > w/x/y/z
#
#      - name: Mirror Directory Structure
#        uses: adityak74/google-drive-upload-git-action@main
#        with:
#          credentials: ${{ secrets.GCP_CREDENTIAL }}
#          filename: "build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab"
#          folderId: ${{ secrets.DRIVE_FOLDER_ID }}
#          overwrite: "true"
#          mirrorDirectoryStructure: "true"

      # Step 1: Install dependencies (jq, curl, Google Cloud SDK)
#      - name: Install dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y jq curl unzip

      # Step 10: Extract service_account from flavors.json use When direct (Upload in google playstore)
#      - name: Set up Google Cloud SDK
#        uses: google-github-actions/setup-gcloud@v2
#        with:
#          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 10: Extract service_account from flavors.json use When direct (Upload in google playstore)
#      - name: Extracting service_account from flavors.json
#        id: extract-application-id
#        run: |
#          service_account=$(jq -r '.flavors["${{ matrix.flavor }}"].service_account' flavors.json)
#          echo "$service_account" > service_account.json
#          cat service_account.json
#
#          PACKAGE_NAME=$(jq -r --arg flavor "${{ matrix.flavor }}" '.flavors[] | select(.name == $flavor) | .application_id' flavors.json)
#
#          # Output the package name for debugging purposes
#          echo "Package name for $FLAVOR flavor: $PACKAGE_NAME"
#
#          # Set the extracted package name as an output for use in later steps
#          echo "::set-output name=PACKAGE_NAME::$PACKAGE_NAME"  # Correct way to set output
#
#      # Step 3: Authenticate using the service account JSON
#      - name: Authenticate Google Cloud SDK
#        run: |
#          gcloud auth activate-service-account --key-file=./service_account.json  # Use the temporary file for authentication
#          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
#
#      # Step 12: Upload the file to Google Drive
#      - name: Upload AAB File to Google Drive
#        run: |
#          FILE_PATH="build/app/outputs/bundle/${{ matrix.flavor }}Release/app-${{ matrix.flavor }}-release.aab"
#          FILE_NAME="app-${{ matrix.flavor }}-release.aab"
#          FOLDER_ID="${{ secrets.DRIVE_FOLDER_ID }}"  # Retrieve folder ID from the secret
#
#          echo "Uploading file ${FILE_PATH} to Google Drive..."
#
#          # Upload file to Google Drive using curl
#          curl -X POST \
#            -L \
#            -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
#            -F "metadata={name :'${FILE_NAME}', parents: ['${FOLDER_ID}']};type=application/json" \
#            -F "file=@${FILE_PATH};type=application/octet-stream" \
#            "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"
