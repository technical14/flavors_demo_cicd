import java.nio.file.Files
import java.nio.file.Paths
import groovy.json.JsonSlurper

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def githubWorkspace = System.getenv("GITHUB_WORKSPACE")
if (githubWorkspace == null) {
    def startDir = file("${rootDir}")
    def projectRoot = startDir.parentFile // Going two levels up
    githubWorkspace = projectRoot
}

def jsonFile = new File(githubWorkspace, "flavors.json")
println("File Path Log: ${jsonFile.absolutePath}")
def flavors = [:]  // Default to an empty map
if (jsonFile.exists()) {
    try {
        def flavorsJson = Files.readString(Paths.get(jsonFile.absolutePath))
        def jsonSlurper = new JsonSlurper()
        def jsonObject = jsonSlurper.parseText(flavorsJson) as Map<String, Object>
        flavors = jsonObject["flavors"] as Map<String, Map<String, Object>>
    } catch (Exception ex) {
        println("Exception while parsing flavors JSON: ${ex.message}")
    }
} else {
    println("Flavors JSON file not found at:")
}

android {
    namespace "fr.xpeho.fluttercicd"
    compileSdkVersion 34

    defaultConfig {
        applicationId "fr.xpeho.fluttercicd"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        // Dynamically create signing configs from JSON data
        flavors.each { flavorName, flavorConfig ->
            if (flavorConfig["is_upload"] == true) {
                create(flavorName) {
                    storeFile file(flavorConfig["keystore_path"])
                    storePassword flavorConfig["store_password"]
                    keyAlias flavorConfig["key_alias"]
                    keyPassword flavorConfig["key_password"]
                }
            } else {
                println "Skipping signing config for flavor: $flavorName (is_upload is false)"
            }
        }
    }

    flavorDimensions "flutter-flavor"

    productFlavors {
        // Dynamically create product flavors from JSON data
        flavors.each { flavorName, flavorConfig ->
            if (flavorConfig["is_upload"] == true) {
                create(flavorName) {
                    dimension "flutter-flavor"
                    applicationId flavorConfig["application_id"] ?: "fr.xpeho.fluttercicd.${flavorName}"
                    resValue "string", "app_name", flavorConfig["app_name"]
                    versionCode((flavorConfig["build_number"] ?: flutterVersionCode)?.toInteger() ?: 1)
                    versionName flavorConfig["version"] ?: flutterVersionName

                    // Assign the signing config for this flavor
                    signingConfig signingConfigs[flavorName]
                }
            } else {
                println "Skipping productFlavors for flavor: $flavorName (is_upload is false)"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
